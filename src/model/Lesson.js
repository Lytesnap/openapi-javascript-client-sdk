/**
 * lytesnap-backend-api
 * This document details all the API endpoints that are consumed exclusively by lytesnap frontend.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ylin@lytesnap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LessonStudentInfo from './LessonStudentInfo';

/**
 * The Lesson model module.
 * @module model/Lesson
 * @version 1.0.12
 */
class Lesson {
    /**
     * Constructs a new <code>Lesson</code>.
     * Lesson Model
     * @alias module:model/Lesson
     * @param lessonId {String} 
     * @param lessonType {module:model/Lesson.LessonTypeEnum} 
     * @param startTime {Date} 
     * @param endTime {Date} 
     * @param locationId {String} 
     * @param coachId {String} 
     * @param bookerId {String} 
     * @param paymentMethodId {String} 
     * @param status {module:model/Lesson.StatusEnum} 
     */
    constructor(lessonId, lessonType, startTime, endTime, locationId, coachId, bookerId, paymentMethodId, status) { 
        
        Lesson.initialize(this, lessonId, lessonType, startTime, endTime, locationId, coachId, bookerId, paymentMethodId, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lessonId, lessonType, startTime, endTime, locationId, coachId, bookerId, paymentMethodId, status) { 
        obj['lessonId'] = lessonId;
        obj['lessonType'] = lessonType;
        obj['startTime'] = startTime;
        obj['endTime'] = endTime;
        obj['locationId'] = locationId;
        obj['coachId'] = coachId;
        obj['bookerId'] = bookerId;
        obj['paymentMethodId'] = paymentMethodId;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Lesson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Lesson} obj Optional instance to populate.
     * @return {module:model/Lesson} The populated <code>Lesson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Lesson();

            if (data.hasOwnProperty('lessonId')) {
                obj['lessonId'] = ApiClient.convertToType(data['lessonId'], 'String');
            }
            if (data.hasOwnProperty('lessonType')) {
                obj['lessonType'] = ApiClient.convertToType(data['lessonType'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('coachId')) {
                obj['coachId'] = ApiClient.convertToType(data['coachId'], 'String');
            }
            if (data.hasOwnProperty('bookerId')) {
                obj['bookerId'] = ApiClient.convertToType(data['bookerId'], 'String');
            }
            if (data.hasOwnProperty('paymentMethodId')) {
                obj['paymentMethodId'] = ApiClient.convertToType(data['paymentMethodId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('studentInfo')) {
                obj['studentInfo'] = LessonStudentInfo.constructFromObject(data['studentInfo']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} lessonId
 */
Lesson.prototype['lessonId'] = undefined;

/**
 * @member {module:model/Lesson.LessonTypeEnum} lessonType
 */
Lesson.prototype['lessonType'] = undefined;

/**
 * @member {Date} startTime
 */
Lesson.prototype['startTime'] = undefined;

/**
 * @member {Date} endTime
 */
Lesson.prototype['endTime'] = undefined;

/**
 * @member {String} locationId
 */
Lesson.prototype['locationId'] = undefined;

/**
 * @member {String} coachId
 */
Lesson.prototype['coachId'] = undefined;

/**
 * @member {String} bookerId
 */
Lesson.prototype['bookerId'] = undefined;

/**
 * @member {String} paymentMethodId
 */
Lesson.prototype['paymentMethodId'] = undefined;

/**
 * @member {module:model/Lesson.StatusEnum} status
 */
Lesson.prototype['status'] = undefined;

/**
 * @member {module:model/LessonStudentInfo} studentInfo
 */
Lesson.prototype['studentInfo'] = undefined;





/**
 * Allowed values for the <code>lessonType</code> property.
 * @enum {String}
 * @readonly
 */
Lesson['LessonTypeEnum'] = {

    /**
     * value: "1-on-1"
     * @const
     */
    "1-on-1": "1-on-1"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Lesson['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "accepted"
     * @const
     */
    "accepted": "accepted",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled"
};



export default Lesson;

